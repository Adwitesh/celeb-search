import numpy as np
import matplotlib.pyplot as plt
import cv2
%matplotlib inline
import tensorflow as tf
from tensorflow.keras import datasets, layers, models
from tensorflow.keras import Sequential
from sklearn.model_selection import train_test_split
from tensorflow.keras.optimizers import SGD

data_path = "/content/drive/MyDrive/celebrity_faces_dataset"
cr_data_path = "/content/drive/MyDrive/celebrity_faces_dataset/cropped_celeb_faces_dataset"

face_cascade = cv2.CascadeClassifier('/content/drive/MyDrive/haarcascade_frontalface_default.xml')
eye_cascade = cv2.CascadeClassifier('/content/drive/MyDrive/haarcascade_eye.xml')

def cropped_image_if_2_eyes(image_path):
  img = cv2.imread(image_path)
  if img is None:
    return None
  gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
  faces = face_cascade.detectMultiScale(gray,1.3,5)
  for (x,y,w,h) in faces:
    roi_gray = gray[y:y+h, x:x+w]
    roi_color = img[y:y+h, x:x+w]
    eyes = eye_cascade.detectMultiScale(roi_gray)
    if len(eyes) >= 2:
      return roi_color

import os
img_dirs = []
for entry in os.scandir(data_path):
  if entry.is_dir():
    img_dirs.append(entry.path)

import shutil
if os.path.exists(cr_data_path):
  shutil.rmtree(cr_data_path)
os.mkdir(cr_data_path)

cropped_img_dirs = []
celebrity_file_names_dict = {}

for img_dir in img_dirs:
  count = 1
  celebrity_name = img_dir.split('/')[-1]
  print(celebrity_name)

  celebrity_file_names_dict[celebrity_name] = []

  for entry in os.scandir(img_dir):
    roi_color = cropped_image_if_2_eyes(entry.path)
    if roi_color is not None:
      cropped_folder = cr_data_path + "/" + celebrity_name
      if not os.path.exists(cropped_folder):
        os.mkdir(cropped_folder)
        cropped_img_dirs.append(cropped_folder)
        print("Generating cropped images in folder: ",cropped_folder)

      cropped_file_name = celebrity_name + str(count) + ".png"
      cropped_file_path = cropped_folder + "/" + cropped_file_name

      cv2.imwrite(cropped_file_path,roi_color)
      celebrity_file_names_dict[celebrity_name].append(cropped_file_path)
      count += 1

class_dict = {}
count = 0
for celebrity_name in celebrity_file_names_dict.keys():
  class_dict[celebrity_name] = count
  count = count + 1
class_dict

X,y=[],[]
for celebrity_name, training_files in celebrity_file_names_dict.items():
  for training_image in training_files:
    img = cv2.imread(training_image)
    scaled_raw_image = cv2.resize(img, (32,32))
    X.append(scaled_raw_image)
    y.append(class_dict[celebrity_name])

X = np.array(X)
y = np.array(y)
X = X.reshape(-1,32,32,3)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X_train = X_train / 255.0
X_test = X_test / 255.0

model = models.Sequential([
    # cnn part
    layers.Conv2D(filters=32, kernel_size=(3,3), activation = "relu", input_shape=(32,32,3)),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(filters=64, kernel_size=(3,3), activation = "relu"),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(filters=128, kernel_size=(3,3), activation = "relu"),
    layers.MaxPooling2D((2,2)),


    # dense network
    layers.Flatten(),
    layers.Dense(1000, activation='relu'),
    layers.Dense(100, activation='relu'),
    layers.Dense(5,activation = 'softmax')
])

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])
model.fit(X_train, y_train, epochs=25)

model.evaluate(X_test, y_test)

history = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10, batch_size=32)
train_loss = history.history['loss']
train_accuracy = history.history['accuracy']
test_loss = history.history['val_loss']
test_accuracy = history.history['val_accuracy']

epochs = range(1, len(train_loss) + 1)

#plotting accuracy 
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.plot(epochs, train_loss, label='Training Loss')
plt.plot(epochs, test_loss, label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()


plt.subplot(1, 2, 2)
plt.plot(epochs, train_accuracy, label='Training Accuracy')
plt.plot(epochs, test_accuracy, label='Validation Accuracy')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()

plt.tight_layout()
plt.show()
